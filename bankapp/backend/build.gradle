plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'application'
	id 'org.bytedeco.gradle-javacpp-platform' version '1.5.9'
	id 'org.beryx.runtime' version '1.12.7'
}

group = 'pl.kul'
version = '0.0.1'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}
application {
	mainClassName = 'pl.kul.kulzaki.KulzakiApplication'
}

repositories {
	mavenCentral()
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-security:3.0.4'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:3.0.4'
	implementation 'org.springframework.boot:spring-boot-starter-web:3.2.1'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.1.1.RELEASE'
	compileOnly 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'
	testImplementation 'org.springframework.boot:spring-boot-starter-test:3.2.1'
	testImplementation 'org.springframework.security:spring-security-test:6.1.2'
	implementation 'org.springframework.security:spring-security-core:6.1.2'
	implementation 'org.springframework.security:spring-security-config:6.1.2'
	implementation 'org.springframework.security:spring-security-web:6.1.2'
	implementation 'com.auth0:java-jwt:4.4.0'
	implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'
}

task createCustomRuntimeImage(type: Exec) {
	def runtimeImageDir = file("$buildDir/customRuntimeImage")

	onlyIf {
		!runtimeImageDir.exists()
	}

	commandLine 'jlink',
			'--add-modules', 'java.base,java.management,java.sql,java.desktop,java.naming,java.security.jgss,java.instrument',
			'--output', runtimeImageDir.absolutePath

	executable = "${System.properties['java.home']}/bin/jlink"
}

runtime {
	jpackage {
		imageName = rootProject.name
		skipInstaller = true
		jvmArgs = [
				'-Xmx512m',
				'--add-modules', 'java.management,java.base,java.sql,java.desktop,java.naming,java.security.jgss,java.instrument'
		]
		imageOptions = ["--win-console", "--runtime-image", "$buildDir/customRuntimeImage"]

	}
}

tasks.named('jpackage').configure {
	dependsOn createCustomRuntimeImage
}

tasks.named('test') {
	useJUnitPlatform()
}
